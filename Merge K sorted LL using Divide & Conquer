class Solution {
    
    Node mergeKList(Node[]arr,int k) {
        return helper(arr,k-1);
    }
    
    Node helper(Node []arr, int last){
        
        while(last!=0){
            int i=0; 
            int j=last;
            
            while(i<j){
                arr[i]=Merge(arr[i], arr[j]);
                i++; j--;
            }
            
            if(i>=j){
                last=j;
            }
        }
        return arr[0];
    }
    
    
    Node Merge(Node head1, Node head2) {
        
        Node t1=head1;
        Node t2=head2;
        Node tail=null;
        Node head=null;
        
        if(t1==null){
            return head2;
        }
        
        if(t2==null){
            return head1;
        }
        
        if(t1.data>=t2.data){
            head=t2;
            tail=t2;
            t2=t2.next;
        }
        
        else{
            head=t1;
            tail=t1;
            t1=t1.next;
        }
        
        while(t1!=null && t2!=null){
            
            if(t1.data>=t2.data){
                tail.next=t2;
                tail=t2;
                t2=t2.next;
            }
            
            else{
                tail.next=t1;
                tail=t1;
                t1=t1.next;
            }
        }
        
        if(t1!=null){
            tail.next=t1;
        }
        
        else{
            tail.next=t2;
        }
        
        return head;
   } 
}
