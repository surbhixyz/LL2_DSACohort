class Solution {
    Node subtraction( Node L1, Node L2){
        if(L1==null || L2==null){
            return null;
        }
        
        int len1= getLength(L1);
        int len2= getLength(L2);
        
        Node largerNode= null;
        Node smallerNode= null;
    
        if(len1!=len2){
            largerNode=len1>len2? L1: L2;
            smallerNode=len1>len2? L2: L1;
            smallerNode=LeadingZeroes(smallerNode, Math.abs(len1-len2));
        }
        
        Node t1=L1;
        Node t2=L2;
        
        else{
            while(t1!=null && t2!=null){
                if(L1.data!=L2.data){
                    largerNode=L1.data>L2.data? L1:L2;
                    smallerNode=L1.data>L2.data? L2:L1;
                    break;
                }
                L1=L1.next;
                L2=L2.next;
            }
        }
        borrow=false;
        return subtractionHelper(largerNode, smallerNode);
    } 
    
    
    Node subtractionHelper(Node L1, Node L2){
        if(L1!=null && L2!=null && borrow==false){
            return null;
        }
        
        Node previous=subtractionHelper(L1!=null? L1.next: null, L2!=null? L2.next: null);
        
        int d1=L1.data;
        int d2=L2.data;
        int sub=0;
        
        if(borrow){
            d1--;
            borrow=false;
        }
        
        if(d1<d2){
            borrow=true;
            d1=d1+10;
        }
     sub=d1-d2;
     Node current= new Node(sub);
     current.next=previous;
     return current;
        
    }
}
